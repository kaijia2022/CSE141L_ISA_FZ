LEA RAS
LEA RBS
LEA RCS
TOG // mode 1
ADD RAS 64
ADD RAS 64
ADD RAS 64 // mem[192] = LSB dist

ADD RBS 64
ADD RBS 64
ADD RBS 64 
ADD RBS 1 // mem[193] = MSB dist

ADD RCS 64
ADD RCS 64
ADD RCS 64
DEC RCS // mem[191] = progress1

MOV RC1 32 // outter loop counter
MOV RDS 127
TOG
MOV [RAS] RDS
TOG
MOV RDS 0
TOG // mode 0
MOV [RBS] RDS
MOV [RCS] RDS

_outLoop:
    TOG // mode 1
    MOV RC2 0 // inner loop counter
    TOG // mode 0
    LEA RCS
    LEA RDS
    TOG // mode 1
    ADD RDS 64
    ADD RDS 64
    ADD RDS 64
    DEC RDS // mem[191] = progress1
    ADD RCS 64
    ADD RCS 64
    ADD RCS 64
    DEC RCS
    DEC RCS // mem[190] = progress2 = 2(beginning)
    TOG // mode 0
    MOV RDS [RDS]
    TOG // mode 1
    ADD RDS 1
    ADD RDS 1
    TOG // mode 0
    MOV [RCS] RDS
    _inLoop:
        LEA RAS 
        LEA RBS
        LEA RCS
        LEA RDS
        TOG // mode 1
        ADD RAS 64
        ADD RAS 64
        ADD RAS 64
        DEC RAS
        ADD RBS 1
        ADD RCS 64
        ADD RCS 64
        ADD RCS 64
        DEC RCS
        DEC RCS
        ADD RDS 1
        TOG // mode 0
        MOV RAS [RAS]  // load progress1 MSB1
        ADD RBS RAS     // LSB1
        MOV RCS [RCS]  // load progress 2
        ADD RDS RCS     // LSB2    
        
        MOV RAS [RAS]
        MOV RBS [RBS]
        MOV RCS [RCS]
        MOV RDS [RDS] 
	
        TOG // mode 1
        MOV RCS 0
        TOG // mode 0
        CMP RAS RCS
        JLT _ANeg
        
        LEA RCS
        TOG // mode 1
        CMP RCS 0
        ADD RCS 64
        ADD RCS 64
        ADD RCS 64
        DEC RCS
        DEC RCS
        MOV RAS 0
        TOG // mode 0
        CMP RCS RAS
        JLT _CNegAPos
        JUMP _bothPos

        _ANeg:
            LEA RCS
            TOG // mode 1
            CMP RCS 0
            ADD RCS 64
            ADD RCS 64
            ADD RCS 64
            DEC RCS
            DEC RCS
            MOV RAS 0
            TOG // mode 0
            MOV RCS [RCS]
            MOV RCS [RCS]
            CMP RCS RAS
            JLT _bothNeg     
            JUMP _ANegCPos

        _bothNeg:
            LEA RAS
            TOG // mode 1
            ADD RAS 64
            ADD RAS 64
            ADD RAS 64
            DEC RAS
            TOG // mode 0
            MOV RAS [RAS]
            MOV RAS [RAS]
            CMP RBS RDS     // check who is larger
            JLT _negBLess  // RBS < RDS
            JUMP _negDLess // RBS > RDS

        _negBLess:
            CMP RAS RCS   
            JLT _bothLess1 // RAS < RCS, RBS < RDS
            // RAS > RCS, RBS < RDS 
            SUBS RAS RCS 
            SUB RDS RBS // RAS = msb dist, RDS = lsb dist
            JUMP _compEnd3

        _bothLess1:
            SUBS RCS RAS
            SUB RBS RDS
            DEC RCS  // RCS = msb dist, RBS = lsb dist
            JUMP _compEnd4

        _negDLess:
            CMP RAS RCS
            JLT _negALess // RAS < RCS, RBS > RDS
            // RAS > RCS, RBS > RDS
            SUB RDS RBS   
            SUBS RAS RCS
            DEC RAS // RAS = msb dist, RDS = lsb dist
            JUMP _compEnd3

        _negALess:
            SUBS RCS RAS
            SUB RBS RDS  // RCS = msb dist, RBS = lsb dist
            JUMP _compEnd4

        _ANegCPos:
            LEA RAS
            TOG 
            ADD RAS 64
            ADD RAS 64
            ADD RAS 64
            DEC RAS
            TOG 
            MOV RAS [RAS]
            MOV RAS [RAS]
            SUBS RCS RAS
            ADD RBS RDS // RCS = msb dist, RBS = lsb dist
            JUMP _compEnd4

        _CNegAPos:
            LEA RAS
            TOG // mode 1
            ADD RAS 64
            ADD RAS 64
            ADD RAS 64
            DEC RAS
            TOG // mode 0
            MOV RAS [RAS]
            MOV RAS [RAS]

            SUBS RAS RCS
            ADD RDS RBS // RAS = msb dist, RDS = lsb dist
            JUMP _compEnd3

        _bothPos:
            LEA RAS
            TOG // mode 1
            ADD RAS 64
            ADD RAS 64
            ADD RAS 64
            DEC RAS
            TOG // mode 0
            MOV RAS [RAS]
            MOV RAS [RAS]

            CMP RBS RDS 
            JLT _posBLess
            JUMP _posDLess

        _posBLess:
            CMP RAS RCS
            JLT _bothLess2
            // RAS > RCS, RBS < RDS
            SUB RBS RDS
            DEC RAS
            SUB RAS RCS  // RAS = msb dist, RBS = lsb dist
            JUMP _compEnd1

        _bothLess2:	 // RAS < RCS, RBS < RDS
            SUB RCS RAS  
            SUB RDS RBS  // RCS = msb dist, RDS = lsb dist
            JUMP _compEnd2

        _posDLess:
            CMP RAS RCS
            JLT _posALess
            // RAS > RCS, RBS > RDS
            SUB RAS RCS
            SUB RBS RDS  // RAS = msb dist, RBS = lsb dist
            JUMP _compEnd1
            
        _posALess: // RAS < RCS, RBS > RDS
            SUB RCS RAS
            DEC RCS
            SUB RDS RBS  // RCS = msb dist, RDS = lsb dist
            JUMP _compEnd2	    

        _compEnd1:
            LEA RCS
            LEA RDS
            TOG // mode 1
            ADD RCS 64
            ADD RCS 64
            ADD RCS 64 // mem[192] = LSB dist

            ADD RDS 64
            ADD RDS 64
            ADD RDS 64 
            ADD RDS 1 // mem[193] = MSB dist
            TOG // mode 0
            MOV [RCS] RBS
            MOV [RDS] RAS
            JUMP _compEndAll

        _compEnd2:
            LEA RAS
            LEA RBS
            TOG // mode 1
            ADD RAS 64
            ADD RAS 64
            ADD RAS 64 // mem[192] = LSB dist

            ADD RBS 64
            ADD RBS 64
            ADD RBS 64 
            ADD RBS 1 // mem[193] = MSB dist
            TOG // mode 0
            MOV [RAS] RDS
            MOV [RBS] RCS
            JUMP _compEndAll
        
        _compEnd3:
            LEA RCS
            LEA RBS
            TOG // mode 1
            ADD RCS 64
            ADD RCS 64
            ADD RCS 64 // mem[192] = LSB dist

            ADD RBS 64
            ADD RBS 64
            ADD RBS 64 
            ADD RBS 1 // mem[193] = MSB dist
            TOG // mode 0
            MOV [RCS] RDS
            MOV [RBS] RAS
            JUMP _compEndAll

        _compEnd4:
            LEA RAS
            LEA RDS
            TOG // mode 1
            ADD RAS 64
            ADD RAS 64
            ADD RAS 64 // mem[192] = LSB dist

            ADD RDS 64
            ADD RDS 64
            ADD RDS 64 
            ADD RDS 1 // mem[193] = MSB dist
            TOG // mode 0
            MOV [RAS] RBS
            MOV [RDS] RCS
            JUMP _compEndAll

        _compEndAll:
            LEA RAS
            LEA RBS
            LEA RCS
            LEA RDS
            TOG // mode 1
            ADD RAS 64
            ADD RAS 1
            ADD RAS 1
            ADD RBS 1
            ADD RCS 64
            ADD RCS 64
            ADD RCS 64
            ADD RDS 64
            ADD RDS 64
            ADD RDS 64 
            ADD RDS 1
            TOG // mode 0
            ADD RBS RAS
            MOV RAS [RAS]  // min_diff_MSB
            MOV RBS [RBS]  // min_diff_LSB
            MOV RCS [RCS]  // LSB dist
            MOV RDS [RDS]  // MSB dist

            CMP RDS RAS  
            JLT _minLess // MSB dist < min_diff_MSB
            SUB RAS RDS
            JZ _minEqual
            JUMP _checkMax

        _minEqual:
            CMP RCS RBS
            JLT _minLess
            JUMP _checkMax

        _minLess:
            LEA RAS
            LEA RBS
            TOG // mode 1
            ADD RAS 64
            ADD RAS 1
            ADD RAS 1
            ADD RBS 1
            TOG // mode 0
            ADD RBS RAS
            MOV [RAS] RDS
            MOV [RBS] RCS

        _checkMax:
            LEA RAS
            LEA RBS
            TOG // mode 1
            ADD RAS 64
            ADD RAS 4
            ADD RBS 1
            TOG // mode 0
            ADD RBS RAS
            MOV RAS [RAS]  // max_diff_MSB
            MOV RBS [RBS]  // min_diff_LSB
            CMP RAS RDS
            JLT _maxLess
            SUB RAS RDS
            JZ _maxEqual
            JUMP _continue

        _maxEqual:
            CMP RBS RCS
            JLT _maxLess
            JUMP _continue

        _maxLess:
            LEA RAS
            LEA RBS
            TOG // mode 1
            ADD RAS 64
            ADD RAS 4
            ADD RBS 1
            TOG // mode 0
            ADD RBS RAS
            MOV [RAS] RDS
            MOV [RBS] RCS

        _continue:
            LEA RCS
            TOG // mode 1
            ADD RCS 64
            ADD RCS 64
            ADD RCS 64
            DEC RCS
            DEC RCS // mem[190] = progress2
	        MOV RBS 64
      	    DEC RBS
	        DEC RBS // RBS = 62
            TOG // mode 0
            MOV RAS [RCS]
	        TOG // mode 1
            ADD RAS 1
            ADD RAS 1
            TOG // mode 0
	        CMP RAS RBS
	        JGT _endinLoop
	        MOV [RCS] RAS
            JUMP _inLoop
    _endinLoop:
        LEA RCS
        TOG // mode 1
        ADD RCS 64
        ADD RCS 64
        ADD RCS 64
        DEC RCS // mem[191] = progress1
        MOV RBS 64
        DEC RBS
        DEC RBS
        DEC RBS
        DEC RBS // RBS = 60
        
        TOG // mode 0
        MOV RAS [RCS]
	    TOG // mode 1
        ADD RAS 1
        ADD RAS 1
        TOG // mode 0
        CMP RAS RBS
        JGT _endoutLoop
        MOV [RCS] RAS
        JUMP _outLoop
_endoutLoop:
NOP
