LEA RAS
LEA RCS

TOG // mode 1
ADD RAS 64
ADD RAS 64
ADD RAS 64
MOV RBS 16 // mem[192] = 16

ADD RCS 64
ADD RCS 64
ADD RCS 64
ADD RCS 1
MOV RDS 0 // mem[193] = 0

TOG // mode 0
MOV [RAS] RBS
MOV [RCS] RDS

LEA RAS

TOG // mode 1
ADD RAS 64
ADD RAS 64
ADD RAS 32 // mem[160] = progress1
MOV RBS 0

TOG // mode 0
MOV [RAS] RBS

TOG // mode 1
MOV RC1 32  // RC1 outloop counter

TOG // mode 0
_outLoop:
    LEA RBS
    TOG // mode 1
    ADD RBS 64
    ADD RBS 64
    ADD RBS 32 // mem[160] = progress1

    TOG // mode 0
    MOV RAS [RBS] // RAS = progress1
    
    LEA RDS
    TOG // mode 1
    ADD RDS 64
    ADD RDS 64
    ADD RDS 32 
    DEC RDS // mem[159] = progress2
    TOG // mode 0
    MOV RBS RAS
    TOG
    ADD RBS 1
    ADD RBS 1
    TOG // mode 0
    MOV [RDS] RBS // initiate mem[159] = 2

    _inLoop:
        LEA RBS
        TOG // mode 1
        ADD RBS 64
        ADD RBS 64
        ADD RBS 32 // mem[160] = progress1

        TOG // mode 0
        MOV RAS [RBS] // index of MSB1

        LEA RDS
        TOG // mode 1
        ADD RDS 64
        ADD RDS 64
        ADD RDS 32 
        DEC RDS // mem[159] = progress2

        TOG // mode 0
        MOV RCS [RDS]

        MOV RAS [RAS] // MSB1
        MOV RCS [RCS] // MSB2

        XOR RAS RCS
	
	LEA RDS // test
	TOG // mode 1
	ADD RDS 64
	ADD RDS 64
	ADD RDS 64
	ADD RDS 32
	TOG // mode 0
	MOV [RDS] RAS
	
        LEA RCS // RCS = ones counter 

        TOG // mode 1
        MOV RES 8 
	MOV RC1 0

        TOG // mode 0
        _countOnes1:
            TOG // mode 1
            MOV RDS 1 // bitmask
            TOG // mode 0
            AND RDS RAS
            JZ _notFound1
            	SHR RAS
                TOG // mode 1
		ADD RC1 1
                ADD RCS 1
                TOG // mode 0
                // save RCS ones counter
                LEA RDS 
                TOG // mode 1
                ADD RDS 64
                ADD RDS 64
                ADD RDS 32
                ADD RDS 1
                TOG // mode 0
                MOV [RDS] RCS
                TOG // mode 1
                DEC RES
                CMP RES 0
                JE _endCount1
                TOG // mode 0
                JUMP _countOnes1
	    _notFound1:
		SHR RAS
            	TOG // mode 1
            	DEC RES
            	CMP RES 0
            	JE _endCount1
           	TOG // mode 0
            	JUMP _countOnes1
                TOG // mode 1
        _endCount1:
            TOG // mode 0
            LEA RBS
            TOG // mode 1
            ADD RBS 64
            ADD RBS 64
            ADD RBS 32 // mem[160] = progress1

            TOG // mode 0
            MOV RAS [RBS] // index of MSB1

            TOG // mode 1
            ADD RAS 1 // index of LSB1

            TOG // mode 0

            LEA RDS
            TOG // mode 1
            ADD RDS 64
            ADD RDS 64
            ADD RDS 32 
            DEC RDS // mem[159] = progress2

            TOG // mode 0
            MOV RCS [RDS]

            TOG // mode 1
            ADD RCS 1

            TOG // mode 0
            MOV RAS [RAS] // LSB1
            MOV RCS [RCS] // LSB2

            XOR RAS RCS

            LEA RCS 
            TOG // mode 1
            ADD RCS 64
            ADD RCS 64
            ADD RCS 32
            ADD RCS 1

            TOG // mode 0
            MOV RCS [RCS] // RCS = ones counter 

            TOG // mode 1
            MOV RES 8 

            TOG // mode 0
            _countOnes2:
                TOG // mode 1
                MOV RDS 1 // bitmask
                TOG // mode 0
                AND RDS RAS
                JZ _notFound2
                SHR RAS
                TOG // mode 1
                ADD RCS 1
		ADD RC1 1
                TOG // mode 0
                // save RCS ones counter
                LEA RDS 
                TOG // mode 1
                ADD RDS 64
                ADD RDS 64
                ADD RDS 32
                ADD RDS 1
                TOG // mode 0
                MOV [RDS] RCS
                TOG // mode 1
                DEC RES
                CMP RES 0
                JE _endCount2
                TOG // mode 0
                JUMP _countOnes2
		_notFound2:
		    SHR RAS
                    TOG // mode 1
                    DEC RES
                    CMP RES 0
                    JE _endCount2
                    TOG // mode 0
                    JUMP _countOnes2
               	    TOG // mode 1
        _endCount2:
	    TOG // mode 0
            LEA RAS
            LEA RBS
            TOG // mode 1
            ADD RAS 64
            ADD RAS 64
            ADD RAS 64  // mem[192] = min_hamming
            ADD RBS 64
            ADD RBS 64
            ADD RBS 64
            ADD RBS 1  // mem[193] = max_hamming
            TOG // mode 0 
            MOV RAS [RAS]
            MOV RBS [RBS]
            LEA RCS 
            TOG // mode 1
            ADD RCS 64
            ADD RCS 64
            ADD RCS 32
            ADD RCS 1
            
            TOG // mode 0
            MOV RCS [RCS] // RCS = ones counter 
            CMP RCS RAS
            JLT _lessThan
            JUMP _gotocompare
        _lessThan:
	    LEA RAS
	    LEA RCS
	    TOG  // mode 1
	    ADD RAS 64
            ADD RAS 64
            ADD RAS 64
	    ADD RCS 64
            ADD RCS 64
            ADD RCS 32
            ADD RCS 1
	    TOG // mode 0
	    MOV RCS [RCS]
            MOV [RAS] RCS
        _gotocompare:
     	    LEA RBS
	    LEA RCS
	    TOG // mode 1
	    ADD RBS 64
            ADD RBS 64
            ADD RBS 64
            ADD RBS 1 
	    ADD RCS 64
            ADD RCS 64
            ADD RCS 32
            ADD RCS 1
	    TOG // mode 0
	    MOV RBS [RBS]
   	    MOV RCS [RCS]
            CMP RBS RCS
            JLT _greaterThan
            JUMP _gotonext
        _greaterThan:
   	    LEA RBS
	    LEA RCS
	    TOG // mode 1
	    ADD RBS 64
            ADD RBS 64
            ADD RBS 64
            ADD RBS 1
	    ADD RCS 64
            ADD RCS 64
            ADD RCS 32
            ADD RCS 1
	    TOG // mode 0
	    MOV RCS [RCS]
            MOV [RBS] RCS
        _gotonext:
            LEA RDS
            TOG // mode 1
            ADD RDS 64
            ADD RDS 64
            ADD RDS 32 
            DEC RDS // mem[159] = progress2
            TOG // mode 0
            MOV RBS [RDS]
            TOG // mode 1
            ADD RBS 1
            ADD RBS 1
	    MOV RCS 64
	    DEC RCS 
	    DEC RCS
	    TOG // mode 0
       	    CMP RBS RCS
	    JGT _endinLoop
            MOV [RDS] RBS
            JUMP _inLoop

    _endinLoop:
        LEA RAS
        TOG // mode 1
        ADD RAS 64
        ADD RAS 64
        ADD RAS 32 // mem[160] = progress1
        TOG // mode 0
        MOV RCS [RAS]
        TOG // mode 1
        ADD RCS 1
        ADD RCS 1
	MOV RBS 64
	DEC RBS
	DEC RBS
	DEC RBS
	DEC RBS
        TOG // mode 0
	CMP RCS RBS
	JGT _endoutLoop // jump if progress > 60
        MOV [RAS] RCS
        JUMP _outLoop

_endoutLoop:
    LEA RAS
    LEA RBS

    TOG // mode 1
    ADD RAS 64
    ADD RAS 64
    ADD RAS 64  // mem[192] = min_hamming
    ADD RBS 64
    ADD RBS 64
    ADD RBS 64
    ADD RBS 1  // mem[193] = max_hamming
    TOG // mode 0 
    MOV RAS [RAS]
    MOV RBS [RBS]

    LEA RCS 
    TOG // mode 1
    ADD RCS 64
    TOG // mode 0
    MOV [RCS] RAS
    TOG // mode 1
    ADD RCS 1
    TOG // mode0 
    MOV [RCS] RBS