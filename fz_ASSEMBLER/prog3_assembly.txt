_Prog3_Init:
	LEA RAS
	TOG
	ADD RAS 127
	ADD RAS 64
	ADD RAS 4
	MOV RBS 0
	MOV RC1 16  //RC1 =  outerloop counter
	TOG
	MOV [RAS] RBS // current_idx = 0
_Prog3_OuterLoop:
	LEA RAS
	TOG
	ADD RAS 127
	ADD RAS 64
	MOV RBS 0
	TOG
	MOV [RAS] RBS // bit_zero_addr = 0
	TOG
	ADD RAS 1
	TOG
	MOV [RAS] RBS // bit_neg1_addr= 0
	TOG
	ADD RAS 1
	TOG
	MOV [RAS] RBS // borrow_addr = 0
	TOG
	ADD RAS 1
	TOG
	MOV [RAS] RBS // carry_addr = 0
	TOG
	ADD RAS 1
	ADD RAS 1   
	TOG
	MOV [RAS] RBS //multiplicand_sign_extend_addr = 0
	TOG
	DEC RAS  //RAS = current_idx (current multiplicand msb)
	MOV RC2 16
	TOG
	MOV RAS [RAS]   //RAS = multiplicand_addr
	MOV RBS RAS
	MOV RCS RAS
	MOV RDS RAS
	TOG
	ADD RBS 64
	ADD RBS 1
	ADD RBS 1   //RBS = Result_byte3_addr
	ADD RCS 1
	ADD RCS 1  //RCS = multiplier_msb_addr
	ADD RDS 1
	ADD RDS 1
	ADD RDS 1  //RDS = multiplier_lsb_addr
	TOG
	MOV RCS [RCS]	//RCS = multiplier_msb
	MOV RDS [RDS]     //RDS = multiplier_lsb
	MOV [RBS] RCS   //copy multiplier msb to result_byte3_addr
	TOG
	ADD RBS 1   //RBS = Result_lsb_addr
	TOG
	MOV [RBS] RDS	//copy multiplier lsb to result_byte4_addr
_Prog3_InnerLoop:
	LEA RBS
	TOG
	ADD RBS 127
	ADD RBS 64
	MOV RCS 0
	ADD RBS 1
	ADD RBS 1
	TOG
	MOV [RBS] RCS  // borrow_addr = 0
	TOG
	ADD RBS 1
	TOG
	MOV [RBS] RCS  // carry_addr = 0
	TOG
	ADD RBS 1
	ADD RBS 1
	TOG
	MOV [RBS] RCS  // multiplicand_sign_extend_addr = 0
	CALL _rightShiftMultiplier
	CALL _updateResult
	TOG
	DEC RC2
	JZ _Prog3_OuterLoop_Cont
	TOG
	JUMP _Prog3_InnerLoop
	TOG
_Prog3_OuterLoop_Cont:	
	MOV RBS 0
	ADD RBS 127
	ADD RBS 64
	ADD RBS 4   //RBS = current_idx (current multiplicand msb) 
	TOG
	MOV RAS [RBS]  //RAS = prev multiplicand_addr
	TOG
	MOV RBS 0
	ADD RBS 127
	ADD RBS 1   //RBS = 'b1000,0000
	TOG
	MOV RCS [RAS]
	SUB RBS RCS
	JZ  _multiplicand_msb_128
	NOP
	JUMP _Prog3_OuterLoop_Next
_multiplicand_msb_128:
	TOG
	ADD RAS 1    //RAS = multiplicand_lsb_addr
	TOG
	MOV RCS [RAS]  //RCS = multiplicand_lsb
	SUB RBS RCS
	JZ _multiplicand_lsb_0
	NOP
	JUMP _Prog3_OuterLoop_Next
_multiplicand_lsb_0:
	COMP RCS        //flip bits
	TOG
	MOV RDS 1
	ADD RAS 1
	ADD RAS 1  
	ADD RAS 64
	TOG
	ADD RCS RDS  //RCS = flipped result_lsb + 1
	SLC RBS       //store carry
	MOV [RAS] RCS
	DEC RAS  //RAS = result_byte3_addr
	LEA RDS
	MOV RCS [RAS] //RCS =  result_byte3
	COMP RCS
	ADD RCS RBS   //RCS = flipped_result_byte3 + carry
	SLC RDS
	MOV [RAS] RCS
	DEC RAS   //RAS = result_byte2_addr
	LEA RBS
	MOV RCS [RAS] //RCS =  result_byte2
	COMP RCS
	ADD RCS RDS   //RCS = flipped_result_byte2 + carry
	SLC RBS
	MOV [RAS] RCS
	DEC RAS   //RAS = result_msb_addr
	LEA RDS
	MOV RCS [RAS] //RCS =  result_byte1
	COMP RCS
	ADD RCS RBS  //RCS = flipped_result_msb + carry
	MOV [RAS] RCS
_Prog3_OuterLoop_Next:
	MOV RBS 0     //reload RAS
	ADD RBS 127
	ADD RBS 64
	ADD RBS 4   //RBS = current_idx (current multiplicand msb) 
	TOG
	MOV RAS [RBS]  //RAS = prev multiplicand_addr
	TOG
	ADD RAS 4    //RAS = current multiplicand_addr
	TOG
	MOV [RBS] RAS   //update current_index
	TOG
	DEC RC1
	JZ _Prog3_End
	TOG
	JUMP _Prog3_OuterLoop
_updateResult:	        //assume RAS = multiplicand_addr
	TOG
	MOV RBS 0
	ADD RBS 127
	ADD RBS 64   //RBS = bit_zero_addr
	TOG
	MOV RCS RBS
	TOG
	ADD RCS 1      //RCS = bit_neg1_addr
	TOG
	MOV RBS [RBS]
	MOV RCS [RCS]
	SUBS RBS RCS
	TOG
	MOV RCS 1
	TOG
	CMP RBS RCS
	JE _pattern10_begin
	TOG
	MOV RBS 0
	ADD RBS 127
	ADD RBS 64   //RBS = bit_zero_addr
	TOG
	MOV RCS RBS
	TOG
	ADD RCS 1      //RCS = bit_neg1_addr
	TOG
	MOV RBS [RBS]
	MOV RCS [RCS]
	SUBS RCS RBS
	TOG
	MOV RBS 1
	TOG
	CMP RBS RCS
	JE _pattern01_begin
	CALL _rightShiftResult_first2byte
	RET	
_pattern10_begin:		//RAS = multiplicand_addr
	MOV RBS RAS
	TOG
	ADD RAS 1         
	ADD RBS 64
	ADD RBS 1
	TOG
	MOV RCS [RAS]     //RCS = multiplicand lsb
	MOV RDS [RBS]    //RDS  = result_byte2
	TOG
	MOV RBS 0
	ADD RBS 127
	ADD RBS 64
	ADD RBS 1
	ADD RBS 1      //RBS = borrow_addr
	TOG
	MOV RBS [RBS]  //RBS = borrow
	ADD RCS RBS   //RCS = multiplicand lsb + borrow
	JZ _pattern10_Result1_multiplicandPlusBorrow_0
	CMPU RDS RCS 
	JLT _pattern10_Result1_setBorrow:
	TOG
	MOV RBS 0
	MOV RCS 0
	ADD RBS 127
	ADD RBS 64
	ADD RBS 1
	ADD RBS 1
	TOG
	MOV [RBS] RCS //reset borrow
	JUMP _pattern10_Result1_cont
_pattern01_begin:		//RAS = multiplicand_addr
	MOV RBS RAS
	TOG
	ADD RAS 1     
	ADD RBS 64
	ADD RBS 1   
	TOG
	MOV RCS [RAS]     //RCS =  multiplicand_lsb
	MOV RDS [RBS]    //RDS  = result_byte2
	TOG
	MOV RBS 0
	ADD RBS 127
	ADD RBS 64
	ADD RBS 1
	ADD RBS 1
	ADD RBS 1   //RBS = carry_addr
	TOG
	MOV RBS [RBS]   
	ADD RCS RDS     //RCS = multiplicand_lsb +  result_byte2
	SLC RBS   //RBS =  carry_out from lsb
	TOG
	MOV RDS 0
	ADD RDS 127
	ADD RDS 64
	ADD RDS 1
	ADD RDS 1
	ADD RDS 1   //RDS = carry_addr
	TOG
	MOV [RDS] RBS        //store carry_out from lsb
	MOV RBS RAS
	TOG   
	ADD RBS 64			//RBS = result_byte2 address
	TOG
	MOV [RBS] RCS      //Update result_byte2
	DEC RAS				//RAS = multiplicand_msb_addrs
	DEC RBS 			//RBS = result_msb_addr
	MOV RCS [RAS]        //RCS = multiplicand_msb
	MOV RDS [RBS]  		//RDS = result_msb
	TOG
	MOV RBS 0
	ADD RBS 127
	ADD RBS 64
	ADD RBS 1
	ADD RBS 1
	ADD RBS 1       //RBS = carry_addr
	TOG
	MOV RBS [RBS]       
	ADD RCS RBS    //RCS = multiplicand_msb + carry_in
	ADD RCS RDS    //RCS = multiplicand_msb + carry_in + result_msb
	MOV RBS RAS
	TOG
	ADD RBS 64
	TOG
	MOV [RBS] RCS    //update result_msb
	JUMP _updateResult_END	
_pattern10_Result1_multiplicandPlusBorrow_0:  //both zero or overflow
	LEA RCS
	CMP RBS RCS
	JE _pattern10_Result1_cont      //both zero if borrow is zero
_pattern10_Result1_setBorrow:
	NOP
	CALL _setBorrowValue
_pattern10_Result1_cont:  //RAS = multiplicand lsb addr
	MOV RBS RAS
	TOG   
	ADD RBS 64    //RBS = result_byte2_addr
	TOG
	MOV RCS [RAS] 
	MOV RDS [RBS]    
	SUB RDS RCS   //RDS = result_byte2 - multiplicand_lsb
	MOV [RBS] RDS    
	DEC RAS           //RAS = multiplicand msb addr
	DEC RBS			  //RBS  = result 3rd byte addr
	MOV RCS [RAS]     //RCS = multiplicand_msb
	MOV RDS [RBS]     //RDS  = result_msb
	TOG
	MOV RBS 0
	ADD RBS 127
	ADD RBS 64
	ADD RBS 1
	ADD RBS 1
	TOG
	MOV RBS [RBS]            //RBS = current borrow value
	SUB RDS RBS	  //RDS = result_msb - borrow
	SUB RDS RCS //RDS = result_byte2 - multiplicand_msb
	MOV RBS RAS
	TOG         
	ADD RBS 64
	TOG     
	MOV [RBS] RDS //update result_msb
	JUMP _updateResult_END	
_setBorrowValue:
	TOG
	MOV RCS 0
	ADD RCS 127
	ADD RCS 64
	ADD RCS 1
	ADD RCS 1
	MOV RDS 1
	TOG
	MOV [RCS] RDS          
	RET
_updateResult_END:
	CALL _rightShiftResult_first2byte
	RET	
_rightShiftResult_first2byte:   //assume RAS = multiplicand_msb_addr
	TOG
	ADD RAS 64
	MOV RBS 0
	MOV RCS 0
	ADD RCS 127
	ADD RCS 64
	ADD RCS 32  //RCS = shift_carry_addr
	TOG
	MOV RDS [RAS]	   //fetch result msb
	ASR RDS                     //arithmetic rightshift msb
	SRC RBS                      //RBS = shift_carry 8'b1000,0000 or 8'b0000,0000
	MOV [RAS] RDS		  //update result_msb
	MOV [RCS] RBS         //update shift carry
	TOG
	ADD RAS 1		//RAS = result_byte2
	MOV RBS 0
	TOG
	MOV RDS [RAS]	
	SHR RDS		//logical right shift
	SRC RBS     //RBS = 8'b1000,0000 or 8'b0000,0000
	MOV RCS [RCS]   //RCS = shift_Carry from msb
	ADD RDS RCS	//add shift_carry
	MOV [RAS] RDS    //update result_byte2          
	TOG
	ADD RAS 1     //RAS = result_byte3
	TOG
	MOV RDS [RAS]	
	ADD RDS RBS	//RDS = result_byte3 + shift_carry( 8'b1000,0000 or 8'b0000,0000)
	MOV [RAS] RDS  //update result_byte3    
	TOG
	MOV RBS 64
	TOG
	SUB RAS RBS
	DEC RAS
	DEC RAS		//RAS is back to multiplicand_msb_addr		
	RET
_rightShiftMultiplier:        //assume RAS = multiplicand_addr 
	TOG						  
	ADD RAS 1
	ADD RAS 1   //RAS = multiplier_msb_addr
	ADD RAS 64	//RAS = result_byte3 
	MOV RCS 0
	MOV RBS 0
	ADD RCS 127
	ADD RCS 64
	ADD RCS 32   //RCS = shift_carry_addr
	TOG
	MOV RDS [RAS]	   //fetch multiplier msb
	SHR  RDS                     //rightshift msb
	SRC RBS                      //RBS either 8'b0000,0000 or 8'b1000,0000
	MOV [RAS] RDS
	MOV [RCS] RBS     //RCS = shift_carry
	TOG
	ADD RAS 1    //RAS = result_lsb
	MOV RBS 0
	TOG
	MOV RDS [RAS]	//lsb
	SHR RDS		//logical right shift
	SLC RBS		//shift_Carry(current)
	MOV RCS [RCS]	
	ADD RDS RCS	//add shift_carry(previous)
	MOV [RAS] RDS
	TOG
	MOV RCS 0
	ADD RCS 127
	ADD RCS 64 
	ADD RCS 32   //RCS = shift_carry_addr
	TOG
	MOV [RCS] RBS   //store current shift_carry
	TOG
	MOV RCS 0
	ADD RCS 127
	ADD RCS 64         //RCS = bit_zero_addr
	TOG
	MOV RDS RCS    
	TOG
	ADD RDS  1	//RDS = bit_neg1_addr
	TOG
	MOV RCS [RCS]
	MOV [RDS] RCS  //*bit_neg1_addr = bit_zero
	TOG
	MOV RCS 0
	ADD RCS 127
	ADD RCS 64  //RCS = bit_zero_addr
	MOV RDS 0
	ADD RDS 127
	ADD RDS 64 
	ADD RDS 32   //RDS = shift_carry_addr
	TOG
	MOV RDS [RDS]
	MOV [RCS] RDS   //*bit_zero_addr = current_shift_carry
	DEC RAS
	DEC RAS
	DEC RAS   
	TOG
	MOV RBS 64
	TOG
	SUB RAS RBS //RAS back to multiplicand_addr
	RET
	TOG
_Prog3_End:
	TOG
	NOP
	NOP
	NOP
	NOP